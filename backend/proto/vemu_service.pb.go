// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: vemu_service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A generic status message used for responses that only need to indicate success or failure.
// 通用状态消息，用于仅需表明成功或失败的响应。
type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`          // True if the operation was successful. / 操作是否成功。
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // An optional error message if the operation failed. / 操作失败时的可选错误信息。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_vemu_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ② ─ 固件 / 数据 (Firmware / Data)
// Request to load a program in Intel hex format.
// 加载 Intel hex 格式程序的请求。
type LoadFirmwareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HexText       []byte                 `protobuf:"bytes,1,opt,name=hex_text,json=hexText,proto3" json:"hex_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadFirmwareRequest) Reset() {
	*x = LoadFirmwareRequest{}
	mi := &file_vemu_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadFirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadFirmwareRequest) ProtoMessage() {}

func (x *LoadFirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadFirmwareRequest.ProtoReflect.Descriptor instead.
func (*LoadFirmwareRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{1}
}

func (x *LoadFirmwareRequest) GetHexText() []byte {
	if x != nil {
		return x.HexText
	}
	return nil
}

// Request to load a raw binary blob.
// 加载二进制数据的请求。
type LoadBinaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          uint32                 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"` // The target memory address to load the data. / 加载数据的目标内存地址。
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`  // The binary data to load. / 要加载的二进制数据。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadBinaryRequest) Reset() {
	*x = LoadBinaryRequest{}
	mi := &file_vemu_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBinaryRequest) ProtoMessage() {}

func (x *LoadBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBinaryRequest.ProtoReflect.Descriptor instead.
func (*LoadBinaryRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoadBinaryRequest) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *LoadBinaryRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ③ ─ 运行控制 (Execution Control)
// Request to step the simulation.
// 单步执行仿真的请求。
type StepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cycles        uint64                 `protobuf:"varint,1,opt,name=cycles,proto3" json:"cycles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepRequest) Reset() {
	*x = StepRequest{}
	mi := &file_vemu_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRequest) ProtoMessage() {}

func (x *StepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRequest.ProtoReflect.Descriptor instead.
func (*StepRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{3}
}

func (x *StepRequest) GetCycles() uint64 {
	if x != nil {
		return x.Cycles
	}
	return 0
}

// Response for a step request.
// 单步执行请求的响应。
type StepResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CyclesExecuted uint64                 `protobuf:"varint,1,opt,name=cycles_executed,json=cyclesExecuted,proto3" json:"cycles_executed,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StepResponse) Reset() {
	*x = StepResponse{}
	mi := &file_vemu_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepResponse) ProtoMessage() {}

func (x *StepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepResponse.ProtoReflect.Descriptor instead.
func (*StepResponse) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{4}
}

func (x *StepResponse) GetCyclesExecuted() uint64 {
	if x != nil {
		return x.CyclesExecuted
	}
	return 0
}

// Request to run the simulation.
// 运行仿真的请求。
type RunRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxCycles     uint64                 `protobuf:"varint,1,opt,name=max_cycles,json=maxCycles,proto3" json:"max_cycles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_vemu_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{5}
}

func (x *RunRequest) GetMaxCycles() uint64 {
	if x != nil {
		return x.MaxCycles
	}
	return 0
}

// Response for a run request.
// 运行请求的响应。
type RunResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CyclesExecuted uint64                 `protobuf:"varint,1,opt,name=cycles_executed,json=cyclesExecuted,proto3" json:"cycles_executed,omitempty"`
	Reason         uint32                 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"` // Stop reason code, corresponds to the StopReason enum in the core. / 停止原因代码，对应核心中的 StopReason 枚举。
	// Deprecated: Marked as deprecated in vemu_service.proto.
	Ebreak        bool `protobuf:"varint,3,opt,name=ebreak,proto3" json:"ebreak,omitempty"` // Deprecated: Use 'reason' instead. / 已弃用：请使用 'reason' 字段。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_vemu_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{6}
}

func (x *RunResponse) GetCyclesExecuted() uint64 {
	if x != nil {
		return x.CyclesExecuted
	}
	return 0
}

func (x *RunResponse) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

// Deprecated: Marked as deprecated in vemu_service.proto.
func (x *RunResponse) GetEbreak() bool {
	if x != nil {
		return x.Ebreak
	}
	return false
}

// ④ ─ 存储访问 (Memory Access)
// Request to read from memory.
// 读内存请求。
type ReadMemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          uint32                 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`     // The starting address to read from. / 读取的起始地址。
	Length        uint32                 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` // The number of bytes to read. / 读取的字节数。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadMemRequest) Reset() {
	*x = ReadMemRequest{}
	mi := &file_vemu_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadMemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMemRequest) ProtoMessage() {}

func (x *ReadMemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMemRequest.ProtoReflect.Descriptor instead.
func (*ReadMemRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{7}
}

func (x *ReadMemRequest) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *ReadMemRequest) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Response containing the data read from memory.
// 包含从内存中读取的数据的响应。
type ReadMemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadMemResponse) Reset() {
	*x = ReadMemResponse{}
	mi := &file_vemu_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadMemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMemResponse) ProtoMessage() {}

func (x *ReadMemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMemResponse.ProtoReflect.Descriptor instead.
func (*ReadMemResponse) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{8}
}

func (x *ReadMemResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to write to memory.
// 写内存请求。
type WriteMemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          uint32                 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"` // The starting address to write to. / 写入的起始地址。
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`  // The data to write. / 要写入的数据。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMemRequest) Reset() {
	*x = WriteMemRequest{}
	mi := &file_vemu_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMemRequest) ProtoMessage() {}

func (x *WriteMemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMemRequest.ProtoReflect.Descriptor instead.
func (*WriteMemRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{9}
}

func (x *WriteMemRequest) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *WriteMemRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Venus DSPM（ROW 视图）(Venus DSPM (ROW view))
// Request to read from the Venus vector scratchpad.
// 从 Venus 向量暂存器读取的请求。
type ReadVectorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Row           uint32                 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`     // The row index to read. / 要读取的行索引。
	Elems         uint32                 `protobuf:"varint,2,opt,name=elems,proto3" json:"elems,omitempty"` // The number of elements to read from the row. / 要从该行读取的元素数量。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadVectorRequest) Reset() {
	*x = ReadVectorRequest{}
	mi := &file_vemu_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadVectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVectorRequest) ProtoMessage() {}

func (x *ReadVectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVectorRequest.ProtoReflect.Descriptor instead.
func (*ReadVectorRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{10}
}

func (x *ReadVectorRequest) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *ReadVectorRequest) GetElems() uint32 {
	if x != nil {
		return x.Elems
	}
	return 0
}

// Response containing data from the Venus vector scratchpad.
// 包含来自 Venus 向量暂存器数据的响应。
type ReadVectorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []uint32               `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadVectorResponse) Reset() {
	*x = ReadVectorResponse{}
	mi := &file_vemu_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadVectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVectorResponse) ProtoMessage() {}

func (x *ReadVectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVectorResponse.ProtoReflect.Descriptor instead.
func (*ReadVectorResponse) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{11}
}

func (x *ReadVectorResponse) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Request to write to the Venus vector scratchpad.
// 向 Venus 向量暂存器写入的请求。
type WriteVectorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Row           uint32                 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`              // The row index to write to. / 要写入的行索引。
	Values        []uint32               `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"` // The values to write. / 要写入的值。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteVectorRequest) Reset() {
	*x = WriteVectorRequest{}
	mi := &file_vemu_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteVectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteVectorRequest) ProtoMessage() {}

func (x *WriteVectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteVectorRequest.ProtoReflect.Descriptor instead.
func (*WriteVectorRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{12}
}

func (x *WriteVectorRequest) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *WriteVectorRequest) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// ⑤ ─ CPU / CSR
// Contains the state of all general-purpose registers.
// 包含所有通用寄存器状态。
type RegisterFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Regs          []uint32               `protobuf:"varint,1,rep,packed,name=regs,proto3" json:"regs,omitempty"` // 32 general-purpose registers (x0-x31). / 32个通用寄存器 (x0-x31)。
	Pc            uint32                 `protobuf:"varint,2,opt,name=pc,proto3" json:"pc,omitempty"`            // The program counter. / 程序计数器。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterFile) Reset() {
	*x = RegisterFile{}
	mi := &file_vemu_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFile) ProtoMessage() {}

func (x *RegisterFile) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFile.ProtoReflect.Descriptor instead.
func (*RegisterFile) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{13}
}

func (x *RegisterFile) GetRegs() []uint32 {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *RegisterFile) GetPc() uint32 {
	if x != nil {
		return x.Pc
	}
	return 0
}

// Request to set a single register's value.
// 设置单个寄存器值的请求。
type SetRegRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // The index of the register to set (0-31). / 要设置的寄存器索引 (0-31)。
	Value         uint32                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // The new value for the register. / 寄存器的新值。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRegRequest) Reset() {
	*x = SetRegRequest{}
	mi := &file_vemu_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRegRequest) ProtoMessage() {}

func (x *SetRegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRegRequest.ProtoReflect.Descriptor instead.
func (*SetRegRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{14}
}

func (x *SetRegRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SetRegRequest) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Request to get a CSR value.
// 获取 CSR 值的请求。
type GetCsrRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCsrRequest) Reset() {
	*x = GetCsrRequest{}
	mi := &file_vemu_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCsrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCsrRequest) ProtoMessage() {}

func (x *GetCsrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCsrRequest.ProtoReflect.Descriptor instead.
func (*GetCsrRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetCsrRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response containing a CSR value.
// 包含 CSR 值的响应。
type GetCsrResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         uint32                 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCsrResponse) Reset() {
	*x = GetCsrResponse{}
	mi := &file_vemu_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCsrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCsrResponse) ProtoMessage() {}

func (x *GetCsrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCsrResponse.ProtoReflect.Descriptor instead.
func (*GetCsrResponse) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetCsrResponse) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Request to set a CSR value.
// 设置 CSR 值的请求。
type SetCsrRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       // The ID of the CSR to write. / 要写入的 CSR ID。
	Value         uint32                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // The new value for the CSR. / CSR 的新值。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCsrRequest) Reset() {
	*x = SetCsrRequest{}
	mi := &file_vemu_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCsrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCsrRequest) ProtoMessage() {}

func (x *SetCsrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCsrRequest.ProtoReflect.Descriptor instead.
func (*SetCsrRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{17}
}

func (x *SetCsrRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetCsrRequest) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A complete snapshot of the CPU's state.
// CPU 状态的完整快照 (给 QueryState 返回)。
type CpuState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Regs          []uint32               `protobuf:"varint,1,rep,packed,name=regs,proto3" json:"regs,omitempty"` // 32 general-purpose registers (x0-x31). / 32个通用寄存器 (x0-x31)。
	Pc            uint32                 `protobuf:"varint,2,opt,name=pc,proto3" json:"pc,omitempty"`            // The program counter. / 程序计数器。
	Cycle         uint64                 `protobuf:"varint,3,opt,name=cycle,proto3" json:"cycle,omitempty"`      // The total number of cycles executed. / 已执行的总周期数。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpuState) Reset() {
	*x = CpuState{}
	mi := &file_vemu_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuState) ProtoMessage() {}

func (x *CpuState) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuState.ProtoReflect.Descriptor instead.
func (*CpuState) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{18}
}

func (x *CpuState) GetRegs() []uint32 {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *CpuState) GetPc() uint32 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *CpuState) GetCycle() uint64 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

// ⑥ ─ 调试 (Debugging)
// Request to set or clear a breakpoint.
// 设置或清除断点的请求。
type BreakpointRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pc            uint32                 `protobuf:"varint,1,opt,name=pc,proto3" json:"pc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BreakpointRequest) Reset() {
	*x = BreakpointRequest{}
	mi := &file_vemu_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BreakpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakpointRequest) ProtoMessage() {}

func (x *BreakpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakpointRequest.ProtoReflect.Descriptor instead.
func (*BreakpointRequest) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{19}
}

func (x *BreakpointRequest) GetPc() uint32 {
	if x != nil {
		return x.Pc
	}
	return 0
}

// An empty message, used for requests that don't require parameters.
// 空消息，用于不需要参数的请求。
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_vemu_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{20}
}

// Represents a single event in an execution trace.
// 代表执行跟踪中的单个事件。
type TraceEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cycle         uint64                 `protobuf:"varint,1,opt,name=cycle,proto3" json:"cycle,omitempty"`      // The cycle count when the instruction was executed. / 指令执行时的周期计数。
	Pc            uint32                 `protobuf:"varint,2,opt,name=pc,proto3" json:"pc,omitempty"`            // The program counter of the executed instruction. / 已执行指令的程序计数器。
	Instr         uint32                 `protobuf:"varint,3,opt,name=instr,proto3" json:"instr,omitempty"`      // The raw instruction encoding. / 原始指令编码。
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`         // The decoded instruction name (e.g., "addi", "VADD"). / 解码后的指令名称 (例如 "addi", "VADD")。
	Regs          []uint32               `protobuf:"varint,5,rep,packed,name=regs,proto3" json:"regs,omitempty"` // Optional: The registers that were modified by this instruction. / 可选：被此条指令修改的寄存器。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEvent) Reset() {
	*x = TraceEvent{}
	mi := &file_vemu_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEvent) ProtoMessage() {}

func (x *TraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vemu_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEvent.ProtoReflect.Descriptor instead.
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return file_vemu_service_proto_rawDescGZIP(), []int{21}
}

func (x *TraceEvent) GetCycle() uint64 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

func (x *TraceEvent) GetPc() uint32 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *TraceEvent) GetInstr() uint32 {
	if x != nil {
		return x.Instr
	}
	return 0
}

func (x *TraceEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceEvent) GetRegs() []uint32 {
	if x != nil {
		return x.Regs
	}
	return nil
}

var File_vemu_service_proto protoreflect.FileDescriptor

const file_vemu_service_proto_rawDesc = "" +
	"\n" +
	"\x12vemu_service.proto\x12\avemu.v1\"2\n" +
	"\x06Status\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"0\n" +
	"\x13LoadFirmwareRequest\x12\x19\n" +
	"\bhex_text\x18\x01 \x01(\fR\ahexText\";\n" +
	"\x11LoadBinaryRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\rR\x04addr\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"%\n" +
	"\vStepRequest\x12\x16\n" +
	"\x06cycles\x18\x01 \x01(\x04R\x06cycles\"7\n" +
	"\fStepResponse\x12'\n" +
	"\x0fcycles_executed\x18\x01 \x01(\x04R\x0ecyclesExecuted\"+\n" +
	"\n" +
	"RunRequest\x12\x1d\n" +
	"\n" +
	"max_cycles\x18\x01 \x01(\x04R\tmaxCycles\"j\n" +
	"\vRunResponse\x12'\n" +
	"\x0fcycles_executed\x18\x01 \x01(\x04R\x0ecyclesExecuted\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\rR\x06reason\x12\x1a\n" +
	"\x06ebreak\x18\x03 \x01(\bB\x02\x18\x01R\x06ebreak\"<\n" +
	"\x0eReadMemRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\rR\x04addr\x12\x16\n" +
	"\x06length\x18\x02 \x01(\rR\x06length\"%\n" +
	"\x0fReadMemResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"9\n" +
	"\x0fWriteMemRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\rR\x04addr\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\";\n" +
	"\x11ReadVectorRequest\x12\x10\n" +
	"\x03row\x18\x01 \x01(\rR\x03row\x12\x14\n" +
	"\x05elems\x18\x02 \x01(\rR\x05elems\",\n" +
	"\x12ReadVectorResponse\x12\x16\n" +
	"\x06values\x18\x01 \x03(\rR\x06values\">\n" +
	"\x12WriteVectorRequest\x12\x10\n" +
	"\x03row\x18\x01 \x01(\rR\x03row\x12\x16\n" +
	"\x06values\x18\x02 \x03(\rR\x06values\"2\n" +
	"\fRegisterFile\x12\x12\n" +
	"\x04regs\x18\x01 \x03(\rR\x04regs\x12\x0e\n" +
	"\x02pc\x18\x02 \x01(\rR\x02pc\";\n" +
	"\rSetRegRequest\x12\x14\n" +
	"\x05index\x18\x01 \x01(\rR\x05index\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\"\x1f\n" +
	"\rGetCsrRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\"&\n" +
	"\x0eGetCsrResponse\x12\x14\n" +
	"\x05value\x18\x01 \x01(\rR\x05value\"5\n" +
	"\rSetCsrRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\"D\n" +
	"\bCpuState\x12\x12\n" +
	"\x04regs\x18\x01 \x03(\rR\x04regs\x12\x0e\n" +
	"\x02pc\x18\x02 \x01(\rR\x02pc\x12\x14\n" +
	"\x05cycle\x18\x03 \x01(\x04R\x05cycle\"#\n" +
	"\x11BreakpointRequest\x12\x0e\n" +
	"\x02pc\x18\x01 \x01(\rR\x02pc\"\a\n" +
	"\x05Empty\"p\n" +
	"\n" +
	"TraceEvent\x12\x14\n" +
	"\x05cycle\x18\x01 \x01(\x04R\x05cycle\x12\x0e\n" +
	"\x02pc\x18\x02 \x01(\rR\x02pc\x12\x14\n" +
	"\x05instr\x18\x03 \x01(\rR\x05instr\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04regs\x18\x05 \x03(\rR\x04regs2\xaa\b\n" +
	"\vVemuService\x12(\n" +
	"\x05Reset\x12\x0e.vemu.v1.Empty\x1a\x0f.vemu.v1.Status\x12+\n" +
	"\bShutdown\x12\x0e.vemu.v1.Empty\x1a\x0f.vemu.v1.Status\x12=\n" +
	"\fLoadFirmware\x12\x1c.vemu.v1.LoadFirmwareRequest\x1a\x0f.vemu.v1.Status\x12=\n" +
	"\x0eLoadBinaryBlob\x12\x1a.vemu.v1.LoadBinaryRequest\x1a\x0f.vemu.v1.Status\x123\n" +
	"\x04Step\x12\x14.vemu.v1.StepRequest\x1a\x15.vemu.v1.StepResponse\x120\n" +
	"\x03Run\x12\x13.vemu.v1.RunRequest\x1a\x14.vemu.v1.RunResponse\x12(\n" +
	"\x05Pause\x12\x0e.vemu.v1.Empty\x1a\x0f.vemu.v1.Status\x12/\n" +
	"\n" +
	"QueryState\x12\x0e.vemu.v1.Empty\x1a\x11.vemu.v1.CpuState\x12?\n" +
	"\n" +
	"ReadMemory\x12\x17.vemu.v1.ReadMemRequest\x1a\x18.vemu.v1.ReadMemResponse\x128\n" +
	"\vWriteMemory\x12\x18.vemu.v1.WriteMemRequest\x1a\x0f.vemu.v1.Status\x12E\n" +
	"\n" +
	"ReadVector\x12\x1a.vemu.v1.ReadVectorRequest\x1a\x1b.vemu.v1.ReadVectorResponse\x12;\n" +
	"\vWriteVector\x12\x1b.vemu.v1.WriteVectorRequest\x1a\x0f.vemu.v1.Status\x120\n" +
	"\aGetRegs\x12\x0e.vemu.v1.Empty\x1a\x15.vemu.v1.RegisterFile\x121\n" +
	"\x06SetReg\x12\x16.vemu.v1.SetRegRequest\x1a\x0f.vemu.v1.Status\x129\n" +
	"\x06GetCSR\x12\x16.vemu.v1.GetCsrRequest\x1a\x17.vemu.v1.GetCsrResponse\x121\n" +
	"\x06SetCSR\x12\x16.vemu.v1.SetCsrRequest\x1a\x0f.vemu.v1.Status\x124\n" +
	"\vTraceStream\x12\x0e.vemu.v1.Empty\x1a\x13.vemu.v1.TraceEvent0\x01\x12<\n" +
	"\rSetBreakpoint\x12\x1a.vemu.v1.BreakpointRequest\x1a\x0f.vemu.v1.Status\x12>\n" +
	"\x0fClearBreakpoint\x12\x1a.vemu.v1.BreakpointRequest\x1a\x0f.vemu.v1.StatusB&Z$github.com/yourorg/go-vemu/api/v1;v1b\x06proto3"

var (
	file_vemu_service_proto_rawDescOnce sync.Once
	file_vemu_service_proto_rawDescData []byte
)

func file_vemu_service_proto_rawDescGZIP() []byte {
	file_vemu_service_proto_rawDescOnce.Do(func() {
		file_vemu_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vemu_service_proto_rawDesc), len(file_vemu_service_proto_rawDesc)))
	})
	return file_vemu_service_proto_rawDescData
}

var file_vemu_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_vemu_service_proto_goTypes = []any{
	(*Status)(nil),              // 0: vemu.v1.Status
	(*LoadFirmwareRequest)(nil), // 1: vemu.v1.LoadFirmwareRequest
	(*LoadBinaryRequest)(nil),   // 2: vemu.v1.LoadBinaryRequest
	(*StepRequest)(nil),         // 3: vemu.v1.StepRequest
	(*StepResponse)(nil),        // 4: vemu.v1.StepResponse
	(*RunRequest)(nil),          // 5: vemu.v1.RunRequest
	(*RunResponse)(nil),         // 6: vemu.v1.RunResponse
	(*ReadMemRequest)(nil),      // 7: vemu.v1.ReadMemRequest
	(*ReadMemResponse)(nil),     // 8: vemu.v1.ReadMemResponse
	(*WriteMemRequest)(nil),     // 9: vemu.v1.WriteMemRequest
	(*ReadVectorRequest)(nil),   // 10: vemu.v1.ReadVectorRequest
	(*ReadVectorResponse)(nil),  // 11: vemu.v1.ReadVectorResponse
	(*WriteVectorRequest)(nil),  // 12: vemu.v1.WriteVectorRequest
	(*RegisterFile)(nil),        // 13: vemu.v1.RegisterFile
	(*SetRegRequest)(nil),       // 14: vemu.v1.SetRegRequest
	(*GetCsrRequest)(nil),       // 15: vemu.v1.GetCsrRequest
	(*GetCsrResponse)(nil),      // 16: vemu.v1.GetCsrResponse
	(*SetCsrRequest)(nil),       // 17: vemu.v1.SetCsrRequest
	(*CpuState)(nil),            // 18: vemu.v1.CpuState
	(*BreakpointRequest)(nil),   // 19: vemu.v1.BreakpointRequest
	(*Empty)(nil),               // 20: vemu.v1.Empty
	(*TraceEvent)(nil),          // 21: vemu.v1.TraceEvent
}
var file_vemu_service_proto_depIdxs = []int32{
	20, // 0: vemu.v1.VemuService.Reset:input_type -> vemu.v1.Empty
	20, // 1: vemu.v1.VemuService.Shutdown:input_type -> vemu.v1.Empty
	1,  // 2: vemu.v1.VemuService.LoadFirmware:input_type -> vemu.v1.LoadFirmwareRequest
	2,  // 3: vemu.v1.VemuService.LoadBinaryBlob:input_type -> vemu.v1.LoadBinaryRequest
	3,  // 4: vemu.v1.VemuService.Step:input_type -> vemu.v1.StepRequest
	5,  // 5: vemu.v1.VemuService.Run:input_type -> vemu.v1.RunRequest
	20, // 6: vemu.v1.VemuService.Pause:input_type -> vemu.v1.Empty
	20, // 7: vemu.v1.VemuService.QueryState:input_type -> vemu.v1.Empty
	7,  // 8: vemu.v1.VemuService.ReadMemory:input_type -> vemu.v1.ReadMemRequest
	9,  // 9: vemu.v1.VemuService.WriteMemory:input_type -> vemu.v1.WriteMemRequest
	10, // 10: vemu.v1.VemuService.ReadVector:input_type -> vemu.v1.ReadVectorRequest
	12, // 11: vemu.v1.VemuService.WriteVector:input_type -> vemu.v1.WriteVectorRequest
	20, // 12: vemu.v1.VemuService.GetRegs:input_type -> vemu.v1.Empty
	14, // 13: vemu.v1.VemuService.SetReg:input_type -> vemu.v1.SetRegRequest
	15, // 14: vemu.v1.VemuService.GetCSR:input_type -> vemu.v1.GetCsrRequest
	17, // 15: vemu.v1.VemuService.SetCSR:input_type -> vemu.v1.SetCsrRequest
	20, // 16: vemu.v1.VemuService.TraceStream:input_type -> vemu.v1.Empty
	19, // 17: vemu.v1.VemuService.SetBreakpoint:input_type -> vemu.v1.BreakpointRequest
	19, // 18: vemu.v1.VemuService.ClearBreakpoint:input_type -> vemu.v1.BreakpointRequest
	0,  // 19: vemu.v1.VemuService.Reset:output_type -> vemu.v1.Status
	0,  // 20: vemu.v1.VemuService.Shutdown:output_type -> vemu.v1.Status
	0,  // 21: vemu.v1.VemuService.LoadFirmware:output_type -> vemu.v1.Status
	0,  // 22: vemu.v1.VemuService.LoadBinaryBlob:output_type -> vemu.v1.Status
	4,  // 23: vemu.v1.VemuService.Step:output_type -> vemu.v1.StepResponse
	6,  // 24: vemu.v1.VemuService.Run:output_type -> vemu.v1.RunResponse
	0,  // 25: vemu.v1.VemuService.Pause:output_type -> vemu.v1.Status
	18, // 26: vemu.v1.VemuService.QueryState:output_type -> vemu.v1.CpuState
	8,  // 27: vemu.v1.VemuService.ReadMemory:output_type -> vemu.v1.ReadMemResponse
	0,  // 28: vemu.v1.VemuService.WriteMemory:output_type -> vemu.v1.Status
	11, // 29: vemu.v1.VemuService.ReadVector:output_type -> vemu.v1.ReadVectorResponse
	0,  // 30: vemu.v1.VemuService.WriteVector:output_type -> vemu.v1.Status
	13, // 31: vemu.v1.VemuService.GetRegs:output_type -> vemu.v1.RegisterFile
	0,  // 32: vemu.v1.VemuService.SetReg:output_type -> vemu.v1.Status
	16, // 33: vemu.v1.VemuService.GetCSR:output_type -> vemu.v1.GetCsrResponse
	0,  // 34: vemu.v1.VemuService.SetCSR:output_type -> vemu.v1.Status
	21, // 35: vemu.v1.VemuService.TraceStream:output_type -> vemu.v1.TraceEvent
	0,  // 36: vemu.v1.VemuService.SetBreakpoint:output_type -> vemu.v1.Status
	0,  // 37: vemu.v1.VemuService.ClearBreakpoint:output_type -> vemu.v1.Status
	19, // [19:38] is the sub-list for method output_type
	0,  // [0:19] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_vemu_service_proto_init() }
func file_vemu_service_proto_init() {
	if File_vemu_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vemu_service_proto_rawDesc), len(file_vemu_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vemu_service_proto_goTypes,
		DependencyIndexes: file_vemu_service_proto_depIdxs,
		MessageInfos:      file_vemu_service_proto_msgTypes,
	}.Build()
	File_vemu_service_proto = out.File
	file_vemu_service_proto_goTypes = nil
	file_vemu_service_proto_depIdxs = nil
}
